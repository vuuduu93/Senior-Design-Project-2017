/*************************
 Project 183 Electronic Power Monitor
 EE4349 Senior Design
 Nicholas Vu
 Cirilo Cardenas
 Emilio Carmago
 ***************************/


#include <Wire.h>
#include <LCD.h>
#include <LiquidCrystal_I2C.h>
#include <SD.h>
#include <SPI.h>
#include <EmonLib.h>


#define I2C_ADDR    0x27  // Define I2C Address where the PCF8574A is
#define BACKLIGHT_PIN     3
#define En_pin  2
#define Rw_pin  1
#define Rs_pin  0
#define D4_pin  4
#define D5_pin  5
#define D6_pin  6
#define D7_pin  7

int deviceary[] = {0, 0, 0, 0, 0, 0};
int n = 0;

int timer = 0;
int testPointOld = 0;
int testPointNew = 0;
int tolerance = 2;
int threshold = 2;  // for device detection
int wantedval = 0;

const int arraysize = 6;
int ary[arraysize] = {27, 21, 31, 1000, 1000, 1000};     // soldering iron, fan set 1, fan set 2,

File myFile;

EnergyMonitor emon1;             // Create an instance

LiquidCrystal_I2C  lcd(I2C_ADDR,En_pin,Rw_pin,Rs_pin,D4_pin,D5_pin,D6_pin,D7_pin);

void setup()
{
  /**Energy Monitor Sample Code**/
  Serial.begin(9600);

// with breadboard
//emon1.voltage(2, 203, 1.3);  // Voltage: input pin, calibration, phase_shift
//emon1.current(1, 8.9);       // Current: input pin, calibration.

//  With Protoboard
emon1.voltage(2, 340, 1.25);  // Voltage: input pin, calibration, phase_shift
emon1.current(1, 8.9);       // Current: input pin, calibration.
 
  /*****LCD Setup*****/
 
  lcd.begin (20,4);
  lcd.setBacklightPin(BACKLIGHT_PIN,POSITIVE);
  lcd.setBacklight(HIGH);
  lcd.setCursor(4,0);                   
  lcd.print("Project 183");
  lcd.setCursor(0,1);
  lcd.print("UTA EE 2017 Nick Vu");
  lcd.setCursor(0,2);
  lcd.print("Cirilo Cardenas");
  lcd.setCursor(1,3);
  lcd.print("Emilio Carmago");
  delay(1300);
  lcd.clear();

  /*****SD Card Setup*****/
  
  // Open serial communications and wait for port to open
      Serial.begin(9600);
     
      while (!Serial)
      {
        ; // wait for serial port to connect. Needed for native USB port only
      }
    
    
      Serial.print("Initializing SD card...");
    
      if (!SD.begin(4))
      {
        Serial.println("initialization failed!");
        return;
      }
      Serial.println("initialization done.");
    
      // open the file. note that only one file can be open at a time,
      // so you have to close this one before opening another.
      myFile = SD.open("test.txt", FILE_WRITE);

 
}

void loop()
{
 //noInterrupts();
  /*****Energy Monitor Sample Code*****/
   emon1.calcVI(20,2000);         // Calculate all. No.of half wavelengths (crossings), time-out
   emon1.serialprint();           // Print out all variables (realpower, apparent power, Vrms, Irms, power factor)
 
  float realPower       = emon1.realPower;        //extract Real Power into variable
  float apparentPower   = emon1.apparentPower;    //extract Apparent Power into variable
  float powerFactor     = emon1.powerFactor;      //extract Power Factor into Variable
  float supplyVoltage   = emon1.Vrms;             //extract Vrms into Variable
  float Irms            = emon1.Irms;             //extract Irms into Variable

  /*****SD Card Setup*****/
//lcd.clear();
//lcd.home ();
//lcd.print(n);
//delay(200);
//Serial.println(n); 

if (1)  //n == 5)               //n=10 15sam/min    n=5 28sam/min      
  {
      // if the file opened okay, write to it:
      myFile = SD.open("test.txt", FILE_WRITE);   /////////    
      if (myFile){
        Serial.print("Writing to test.txt...");

//        myFile.print("Apparent");        
        myFile.print(apparentPower);
        myFile.print(";");        
//        myFile.print("Irms");
        myFile.print(Irms);
        myFile.print(";");
//        myFile.print("Vrms");
        myFile.print(supplyVoltage);
        myFile.print(";");
//        myFile.print("Power Fact");        
        myFile.print(powerFactor);
        myFile.print(";");
//        myFile.print("Real Power");
        myFile.println(realPower);

        myFile.close();
        Serial.println("done.");
      }
          
      else
      {
        // if the file didn't open, print an error:
        Serial.println("error opening test.txt");
      }
       n = 0 ;
  }

  else{
    ++n;  
  }


  lcd.clear();
  lcd.home ();
  lcd.print(apparentPower);
  lcd.print(" Apparent");
  lcd.setCursor(0,1);
  lcd.print(Irms);
  lcd.print(" Irms ");
  lcd.print(supplyVoltage);
  lcd.print(" Vrms");
  lcd.setCursor(0,2);
  lcd.print(powerFactor);
  lcd.print("  Power Fact");
  lcd.setCursor(0,3);
  lcd.print(realPower);
  lcd.print(" Real Power");





// signature detection
  if (timer == 1){
    testPointOld = realPower;
  }
  if (timer == 10){
    testPointNew = realPower;
    timer = 0;
  }
  timer++;

  if (testPointNew < (testPointOld + tolerance) && testPointNew > (testPointOld - tolerance)){  // checks to see if its has reached a stable point of +/- tolerance 
   
   
   // keeps adding when turning something off
    wantedval = ((testPointNew + testPointOld) / 2) - wantedval; // subtracts last wanted val, assuming new device is plugged in and not off   
     
    }

// for positive feedback, will need another one for when devices turn off 
  for (int k=0; k<arraysize; k++) {

   // works for adding devices not taking them out 
   if ((wantedval > (ary[k] - threshold)) && (wantedval < (ary[k] + threshold))) {
     deviceary[k] = 1;
     break; 
   }
   // taking them out ??? 
   if (((-wantedval) > (ary[k] - threshold)) && ((-wantedval) < (ary[k] + threshold))) {
     deviceary[k] = 0;
     break; 
   }   
  }

//  Prints array that indicates what device is on
 if(timer == 5){
  lcd.clear();
  lcd.home ();
  for (int count=0; count<6; count++) {
    lcd.print(deviceary[count]); //1 would indicate device is on and  0 off
    }
 
  
  lcd.setCursor(0,1);
  lcd.print(wantedval);
  lcd.setCursor(0,2);
  lcd.print(testPointOld);
  lcd.setCursor(0,3);
  lcd.print(testPointNew);
  delay(1000);
 }
}




  
